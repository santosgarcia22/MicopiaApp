// Generated by view binder compiler. Do not edit!
package com.example.airsec.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.airsec.R;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityFlightsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final Chip chipAbiertos;

  @NonNull
  public final Chip chipCerrados;

  @NonNull
  public final ChipGroup chipsFiltros;

  @NonNull
  public final LinearLayout contentContainer;

  @NonNull
  public final LinearLayout emptyState;

  @NonNull
  public final TextInputEditText etBuscarVuelo;

  @NonNull
  public final FloatingActionButton fabNuevoVuelo;

  @NonNull
  public final RecyclerView rvVuelos;

  @NonNull
  public final TextInputLayout tilBuscarVuelo;

  private ActivityFlightsBinding(@NonNull CoordinatorLayout rootView, @NonNull Chip chipAbiertos,
      @NonNull Chip chipCerrados, @NonNull ChipGroup chipsFiltros,
      @NonNull LinearLayout contentContainer, @NonNull LinearLayout emptyState,
      @NonNull TextInputEditText etBuscarVuelo, @NonNull FloatingActionButton fabNuevoVuelo,
      @NonNull RecyclerView rvVuelos, @NonNull TextInputLayout tilBuscarVuelo) {
    this.rootView = rootView;
    this.chipAbiertos = chipAbiertos;
    this.chipCerrados = chipCerrados;
    this.chipsFiltros = chipsFiltros;
    this.contentContainer = contentContainer;
    this.emptyState = emptyState;
    this.etBuscarVuelo = etBuscarVuelo;
    this.fabNuevoVuelo = fabNuevoVuelo;
    this.rvVuelos = rvVuelos;
    this.tilBuscarVuelo = tilBuscarVuelo;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityFlightsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityFlightsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_flights, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityFlightsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chipAbiertos;
      Chip chipAbiertos = ViewBindings.findChildViewById(rootView, id);
      if (chipAbiertos == null) {
        break missingId;
      }

      id = R.id.chipCerrados;
      Chip chipCerrados = ViewBindings.findChildViewById(rootView, id);
      if (chipCerrados == null) {
        break missingId;
      }

      id = R.id.chipsFiltros;
      ChipGroup chipsFiltros = ViewBindings.findChildViewById(rootView, id);
      if (chipsFiltros == null) {
        break missingId;
      }

      id = R.id.contentContainer;
      LinearLayout contentContainer = ViewBindings.findChildViewById(rootView, id);
      if (contentContainer == null) {
        break missingId;
      }

      id = R.id.emptyState;
      LinearLayout emptyState = ViewBindings.findChildViewById(rootView, id);
      if (emptyState == null) {
        break missingId;
      }

      id = R.id.etBuscarVuelo;
      TextInputEditText etBuscarVuelo = ViewBindings.findChildViewById(rootView, id);
      if (etBuscarVuelo == null) {
        break missingId;
      }

      id = R.id.fabNuevoVuelo;
      FloatingActionButton fabNuevoVuelo = ViewBindings.findChildViewById(rootView, id);
      if (fabNuevoVuelo == null) {
        break missingId;
      }

      id = R.id.rvVuelos;
      RecyclerView rvVuelos = ViewBindings.findChildViewById(rootView, id);
      if (rvVuelos == null) {
        break missingId;
      }

      id = R.id.tilBuscarVuelo;
      TextInputLayout tilBuscarVuelo = ViewBindings.findChildViewById(rootView, id);
      if (tilBuscarVuelo == null) {
        break missingId;
      }

      return new ActivityFlightsBinding((CoordinatorLayout) rootView, chipAbiertos, chipCerrados,
          chipsFiltros, contentContainer, emptyState, etBuscarVuelo, fabNuevoVuelo, rvVuelos,
          tilBuscarVuelo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
