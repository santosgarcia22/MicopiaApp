// Generated by view binder compiler. Do not edit!
package com.example.airsec.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.airsec.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPersonsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FloatingActionButton btnAgregarPersona;

  @NonNull
  public final MaterialButton btnNavCabecera;

  @NonNull
  public final MaterialButton btnNavPersonas;

  @NonNull
  public final MaterialButton btnNavTiempos;

  @NonNull
  public final MaterialCardView cardHeader;

  @NonNull
  public final TextInputEditText etBuscarDoc;

  @NonNull
  public final LinearLayout layoutNav;

  @NonNull
  public final RecyclerView rvPersonas;

  @NonNull
  public final ScrollView scrollMain;

  @NonNull
  public final TextInputLayout tilBuscarDoc;

  @NonNull
  public final MaterialToolbar toolbarAccesos;

  private ActivityPersonsBinding(@NonNull ConstraintLayout rootView,
      @NonNull FloatingActionButton btnAgregarPersona, @NonNull MaterialButton btnNavCabecera,
      @NonNull MaterialButton btnNavPersonas, @NonNull MaterialButton btnNavTiempos,
      @NonNull MaterialCardView cardHeader, @NonNull TextInputEditText etBuscarDoc,
      @NonNull LinearLayout layoutNav, @NonNull RecyclerView rvPersonas,
      @NonNull ScrollView scrollMain, @NonNull TextInputLayout tilBuscarDoc,
      @NonNull MaterialToolbar toolbarAccesos) {
    this.rootView = rootView;
    this.btnAgregarPersona = btnAgregarPersona;
    this.btnNavCabecera = btnNavCabecera;
    this.btnNavPersonas = btnNavPersonas;
    this.btnNavTiempos = btnNavTiempos;
    this.cardHeader = cardHeader;
    this.etBuscarDoc = etBuscarDoc;
    this.layoutNav = layoutNav;
    this.rvPersonas = rvPersonas;
    this.scrollMain = scrollMain;
    this.tilBuscarDoc = tilBuscarDoc;
    this.toolbarAccesos = toolbarAccesos;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPersonsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPersonsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_persons, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPersonsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnAgregarPersona;
      FloatingActionButton btnAgregarPersona = ViewBindings.findChildViewById(rootView, id);
      if (btnAgregarPersona == null) {
        break missingId;
      }

      id = R.id.btnNavCabecera;
      MaterialButton btnNavCabecera = ViewBindings.findChildViewById(rootView, id);
      if (btnNavCabecera == null) {
        break missingId;
      }

      id = R.id.btnNavPersonas;
      MaterialButton btnNavPersonas = ViewBindings.findChildViewById(rootView, id);
      if (btnNavPersonas == null) {
        break missingId;
      }

      id = R.id.btnNavTiempos;
      MaterialButton btnNavTiempos = ViewBindings.findChildViewById(rootView, id);
      if (btnNavTiempos == null) {
        break missingId;
      }

      id = R.id.cardHeader;
      MaterialCardView cardHeader = ViewBindings.findChildViewById(rootView, id);
      if (cardHeader == null) {
        break missingId;
      }

      id = R.id.etBuscarDoc;
      TextInputEditText etBuscarDoc = ViewBindings.findChildViewById(rootView, id);
      if (etBuscarDoc == null) {
        break missingId;
      }

      id = R.id.layoutNav;
      LinearLayout layoutNav = ViewBindings.findChildViewById(rootView, id);
      if (layoutNav == null) {
        break missingId;
      }

      id = R.id.rvPersonas;
      RecyclerView rvPersonas = ViewBindings.findChildViewById(rootView, id);
      if (rvPersonas == null) {
        break missingId;
      }

      id = R.id.scrollMain;
      ScrollView scrollMain = ViewBindings.findChildViewById(rootView, id);
      if (scrollMain == null) {
        break missingId;
      }

      id = R.id.tilBuscarDoc;
      TextInputLayout tilBuscarDoc = ViewBindings.findChildViewById(rootView, id);
      if (tilBuscarDoc == null) {
        break missingId;
      }

      id = R.id.toolbarAccesos;
      MaterialToolbar toolbarAccesos = ViewBindings.findChildViewById(rootView, id);
      if (toolbarAccesos == null) {
        break missingId;
      }

      return new ActivityPersonsBinding((ConstraintLayout) rootView, btnAgregarPersona,
          btnNavCabecera, btnNavPersonas, btnNavTiempos, cardHeader, etBuscarDoc, layoutNav,
          rvPersonas, scrollMain, tilBuscarDoc, toolbarAccesos);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
