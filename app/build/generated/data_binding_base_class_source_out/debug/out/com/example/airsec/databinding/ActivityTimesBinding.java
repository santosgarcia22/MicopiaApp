// Generated by view binder compiler. Do not edit!
package com.example.airsec.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.GridLayout;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.airsec.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityTimesBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton btnAbordajeFin;

  @NonNull
  public final MaterialButton btnAbordajeInicio;

  @NonNull
  public final MaterialButton btnAseoIngreso;

  @NonNull
  public final MaterialButton btnAseoSalida;

  @NonNull
  public final MaterialButton btnCabinaFin;

  @NonNull
  public final MaterialButton btnCabinaInicio;

  @NonNull
  public final MaterialButton btnCierrePuerta;

  @NonNull
  public final MaterialButton btnDesabordajeFin;

  @NonNull
  public final MaterialButton btnDesabordajeInicio;

  @NonNull
  public final MaterialButton btnNavCabecera;

  @NonNull
  public final MaterialButton btnNavPersonas;

  @NonNull
  public final MaterialButton btnNavTiempos;

  @NonNull
  public final MaterialButton btnTripulacionIngreso;

  @NonNull
  public final LinearLayout contenedorChips;

  @NonNull
  public final GridLayout gridEventos;

  @NonNull
  public final LinearLayout layoutNav;

  @NonNull
  public final ScrollView scrollMain;

  @NonNull
  public final MaterialToolbar toolbarTimes;

  private ActivityTimesBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton btnAbordajeFin, @NonNull MaterialButton btnAbordajeInicio,
      @NonNull MaterialButton btnAseoIngreso, @NonNull MaterialButton btnAseoSalida,
      @NonNull MaterialButton btnCabinaFin, @NonNull MaterialButton btnCabinaInicio,
      @NonNull MaterialButton btnCierrePuerta, @NonNull MaterialButton btnDesabordajeFin,
      @NonNull MaterialButton btnDesabordajeInicio, @NonNull MaterialButton btnNavCabecera,
      @NonNull MaterialButton btnNavPersonas, @NonNull MaterialButton btnNavTiempos,
      @NonNull MaterialButton btnTripulacionIngreso, @NonNull LinearLayout contenedorChips,
      @NonNull GridLayout gridEventos, @NonNull LinearLayout layoutNav,
      @NonNull ScrollView scrollMain, @NonNull MaterialToolbar toolbarTimes) {
    this.rootView = rootView;
    this.btnAbordajeFin = btnAbordajeFin;
    this.btnAbordajeInicio = btnAbordajeInicio;
    this.btnAseoIngreso = btnAseoIngreso;
    this.btnAseoSalida = btnAseoSalida;
    this.btnCabinaFin = btnCabinaFin;
    this.btnCabinaInicio = btnCabinaInicio;
    this.btnCierrePuerta = btnCierrePuerta;
    this.btnDesabordajeFin = btnDesabordajeFin;
    this.btnDesabordajeInicio = btnDesabordajeInicio;
    this.btnNavCabecera = btnNavCabecera;
    this.btnNavPersonas = btnNavPersonas;
    this.btnNavTiempos = btnNavTiempos;
    this.btnTripulacionIngreso = btnTripulacionIngreso;
    this.contenedorChips = contenedorChips;
    this.gridEventos = gridEventos;
    this.layoutNav = layoutNav;
    this.scrollMain = scrollMain;
    this.toolbarTimes = toolbarTimes;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTimesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTimesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_times, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTimesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnAbordajeFin;
      MaterialButton btnAbordajeFin = ViewBindings.findChildViewById(rootView, id);
      if (btnAbordajeFin == null) {
        break missingId;
      }

      id = R.id.btnAbordajeInicio;
      MaterialButton btnAbordajeInicio = ViewBindings.findChildViewById(rootView, id);
      if (btnAbordajeInicio == null) {
        break missingId;
      }

      id = R.id.btnAseoIngreso;
      MaterialButton btnAseoIngreso = ViewBindings.findChildViewById(rootView, id);
      if (btnAseoIngreso == null) {
        break missingId;
      }

      id = R.id.btnAseoSalida;
      MaterialButton btnAseoSalida = ViewBindings.findChildViewById(rootView, id);
      if (btnAseoSalida == null) {
        break missingId;
      }

      id = R.id.btnCabinaFin;
      MaterialButton btnCabinaFin = ViewBindings.findChildViewById(rootView, id);
      if (btnCabinaFin == null) {
        break missingId;
      }

      id = R.id.btnCabinaInicio;
      MaterialButton btnCabinaInicio = ViewBindings.findChildViewById(rootView, id);
      if (btnCabinaInicio == null) {
        break missingId;
      }

      id = R.id.btnCierrePuerta;
      MaterialButton btnCierrePuerta = ViewBindings.findChildViewById(rootView, id);
      if (btnCierrePuerta == null) {
        break missingId;
      }

      id = R.id.btnDesabordajeFin;
      MaterialButton btnDesabordajeFin = ViewBindings.findChildViewById(rootView, id);
      if (btnDesabordajeFin == null) {
        break missingId;
      }

      id = R.id.btnDesabordajeInicio;
      MaterialButton btnDesabordajeInicio = ViewBindings.findChildViewById(rootView, id);
      if (btnDesabordajeInicio == null) {
        break missingId;
      }

      id = R.id.btnNavCabecera;
      MaterialButton btnNavCabecera = ViewBindings.findChildViewById(rootView, id);
      if (btnNavCabecera == null) {
        break missingId;
      }

      id = R.id.btnNavPersonas;
      MaterialButton btnNavPersonas = ViewBindings.findChildViewById(rootView, id);
      if (btnNavPersonas == null) {
        break missingId;
      }

      id = R.id.btnNavTiempos;
      MaterialButton btnNavTiempos = ViewBindings.findChildViewById(rootView, id);
      if (btnNavTiempos == null) {
        break missingId;
      }

      id = R.id.btnTripulacionIngreso;
      MaterialButton btnTripulacionIngreso = ViewBindings.findChildViewById(rootView, id);
      if (btnTripulacionIngreso == null) {
        break missingId;
      }

      id = R.id.contenedorChips;
      LinearLayout contenedorChips = ViewBindings.findChildViewById(rootView, id);
      if (contenedorChips == null) {
        break missingId;
      }

      id = R.id.gridEventos;
      GridLayout gridEventos = ViewBindings.findChildViewById(rootView, id);
      if (gridEventos == null) {
        break missingId;
      }

      id = R.id.layoutNav;
      LinearLayout layoutNav = ViewBindings.findChildViewById(rootView, id);
      if (layoutNav == null) {
        break missingId;
      }

      id = R.id.scrollMain;
      ScrollView scrollMain = ViewBindings.findChildViewById(rootView, id);
      if (scrollMain == null) {
        break missingId;
      }

      id = R.id.toolbarTimes;
      MaterialToolbar toolbarTimes = ViewBindings.findChildViewById(rootView, id);
      if (toolbarTimes == null) {
        break missingId;
      }

      return new ActivityTimesBinding((ConstraintLayout) rootView, btnAbordajeFin,
          btnAbordajeInicio, btnAseoIngreso, btnAseoSalida, btnCabinaFin, btnCabinaInicio,
          btnCierrePuerta, btnDesabordajeFin, btnDesabordajeInicio, btnNavCabecera, btnNavPersonas,
          btnNavTiempos, btnTripulacionIngreso, contenedorChips, gridEventos, layoutNav, scrollMain,
          toolbarTimes);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
